{
	"name": "df_transform_population",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_population",
						"type": "DatasetReference"
					},
					"name": "sourcePopulation"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_population",
						"type": "DatasetReference"
					},
					"name": "sink"
				}
			],
			"transformations": [
				{
					"name": "addColumnAgeAndCountry"
				},
				{
					"name": "JoinDimCountry"
				},
				{
					"name": "select"
				},
				{
					"name": "pivot"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {indic_de,geo\\time} as string,",
				"          {2008 } as string,",
				"          {2009 } as string,",
				"          {2010 } as string,",
				"          {2011 } as string,",
				"          {2012 } as string,",
				"          {2013 } as string,",
				"          {2014 } as string,",
				"          {2015 } as string,",
				"          {2016 } as string,",
				"          {2017 } as string,",
				"          {2018 } as string,",
				"          {2019 } as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourcePopulation",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"sourcePopulation derive(age = regexReplace(split({indic_de,geo\\time},',')[1], 'PC_', ''),",
				"          country_code = split({indic_de,geo\\time},',')[2],",
				"          {2019 } = round(toDouble(regexReplace({2019 }, '[a-z]', '')) ,2)) ~> addColumnAgeAndCountry",
				"addColumnAgeAndCountry, sourceDimCountry join(country_code == country_code_2_digit,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinDimCountry",
				"JoinDimCountry select(mapColumn(",
				"          age,",
				"          country_code,",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          percentage_2019 = {2019 }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select",
				"select pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population),",
				"     pivotBy(age),",
				"     {} = sum(percentage_2019),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivot",
				"pivot sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink"
			]
		}
	}
}