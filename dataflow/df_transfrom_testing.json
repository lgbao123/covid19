{
	"name": "df_transfrom_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "sourceTesting"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				}
			],
			"sinks": [
				{
					"name": "sinkOutput"
				}
			],
			"transformations": [
				{
					"name": "selectColumn"
				},
				{
					"name": "sortData"
				},
				{
					"name": "derivedColumnDimDate"
				},
				{
					"name": "CreateCountryCol"
				},
				{
					"name": "filterEurope"
				},
				{
					"name": "joinCountry"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Entity as string,",
				"          {ISO code} as string,",
				"          Date as string,",
				"          {Source URL} as string,",
				"          {Source label} as string,",
				"          Notes as string,",
				"          {Cumulative total} as string,",
				"          {Daily change in cumulative total} as string,",
				"          {Cumulative total per thousand} as string,",
				"          {Daily change in cumulative total per thousand} as string,",
				"          {7-day smoothed daily change} as string,",
				"          {7-day smoothed daily change per thousand} as string,",
				"          {Short-term positive rate} as string,",
				"          {Short-term tests per case} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceTesting",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"source(output(",
				"          countriesAndTerritories as string,",
				"          location as string,",
				"          continent as string,",
				"          population_year as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"joinCountry select(mapColumn(",
				"          country,",
				"          continent,",
				"          population,",
				"          date = Date,",
				"          year_week,",
				"          year_month,",
				"          total = {Cumulative total},",
				"          daily_total = {Daily change in cumulative total},",
				"          positive_rate = {Short-term positive rate},",
				"          tests_per_case = {Short-term tests per case}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumn",
				"selectColumn sort(asc(date, true),",
				"     asc(country, true)) ~> sortData",
				"sourceDimDate derive(year_week = concat(toString(year),'-W',lpad( toString(week_of_year) , 2, '0')),",
				"          year_month = concat(toString(year),'-M',lpad( toString(month) , 2, '0'))) ~> derivedColumnDimDate",
				"sourceTesting derive(country = trim(split(Entity,\"-\")[1])) ~> CreateCountryCol",
				"sourceDimCountry filter(continent=='Europe') ~> filterEurope",
				"CreateCountryCol, filterEurope join(country == location,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCountry",
				"sortData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          country",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> sinkOutput"
			]
		}
	}
}