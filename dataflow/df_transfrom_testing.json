{
	"name": "df_transfrom_testing",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_testing",
						"type": "DatasetReference"
					},
					"name": "sourceTesting"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_testing",
						"type": "DatasetReference"
					},
					"name": "sinkOutput"
				}
			],
			"transformations": [
				{
					"name": "lookupCountry"
				},
				{
					"name": "lookupDimDate"
				},
				{
					"name": "selectColumn"
				},
				{
					"name": "sortData"
				},
				{
					"name": "derivedColumnDimDate"
				},
				{
					"name": "derivedColumnCountry"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Entity as string,",
				"          {ISO code} as string,",
				"          Date as date,",
				"          {Source URL} as string,",
				"          {Source label} as string,",
				"          Notes as string,",
				"          {Cumulative total} as integer,",
				"          {Daily change in cumulative total} as short,",
				"          {Cumulative total per thousand} as double,",
				"          {Daily change in cumulative total per thousand} as double,",
				"          {7-day smoothed daily change} as short,",
				"          {7-day smoothed daily change per thousand} as double,",
				"          {Short-term positive rate} as double,",
				"          {Short-term tests per case} as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceTesting",
				"source(output(",
				"          day_key as integer,",
				"          date as date,",
				"          day as short,",
				"          month as short,",
				"          year as short,",
				"          day_name as string,",
				"          month_name as string,",
				"          day_of_year as short,",
				"          week_of_year as short,",
				"          week_of_month as short,",
				"          week_begin_date as date,",
				"          week_end_date as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"source(output(",
				"          countriesAndTerritories as string,",
				"          location as string,",
				"          continent as string,",
				"          population_year as short,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"derivedColumnCountry, sourceDimCountry lookup(country == location,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry, derivedColumnDimDate lookup(sourceTesting@Date == sourceDimDate@date,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupDimDate",
				"lookupDimDate select(mapColumn(",
				"          country,",
				"          continent,",
				"          population,",
				"          date = sourceTesting@Date,",
				"          year_week,",
				"          year_month,",
				"          total = {Cumulative total},",
				"          daily_total = {Daily change in cumulative total},",
				"          positive_rate = {Short-term positive rate},",
				"          tests_per_case = {Short-term tests per case}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumn",
				"selectColumn sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortData",
				"sourceDimDate derive(year_week = concat(toString(year),'-W',lpad( toString(week_of_year) , 2, '0')),",
				"          year_month = concat(toString(year),'-M',lpad( toString(month) , 2, '0'))) ~> derivedColumnDimDate",
				"sourceTesting derive(country = trim(split(Entity,\"-\")[1])) ~> derivedColumnCountry",
				"sortData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkOutput"
			]
		}
	}
}