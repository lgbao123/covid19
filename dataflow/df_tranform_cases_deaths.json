{
	"name": "df_tranform_cases_deaths",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesDeathsSource"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "CountrySource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_cases_deaths",
						"type": "DatasetReference"
					},
					"name": "CasesAndDeathsSink"
				}
			],
			"transformations": [
				{
					"name": "LookupCountry"
				},
				{
					"name": "SelectContinent"
				},
				{
					"name": "FilterNullContinent"
				},
				{
					"name": "filterForOnlyEurope"
				},
				{
					"name": "SelectForSink"
				}
			],
			"scriptLines": [
				"source(output(",
				"          date as date,",
				"          location as string,",
				"          new_cases as double,",
				"          new_deaths as double,",
				"          total_cases as double,",
				"          total_deaths as double,",
				"          weekly_cases as double,",
				"          weekly_deaths as double,",
				"          biweekly_cases as double,",
				"          biweekly_deaths as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CasesDeathsSource",
				"source(output(",
				"          countriesAndTerritories as string,",
				"          location as string,",
				"          continent as string,",
				"          population_year as short,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> CountrySource",
				"FilterNullContinent, CountrySource lookup(CasesDeathsSource@location == CountrySource@location,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupCountry",
				"LookupCountry select(mapColumn(",
				"          date,",
				"          country = CasesDeathsSource@location,",
				"          continent,",
				"          population,",
				"          new_cases,",
				"          new_deaths,",
				"          total_cases,",
				"          total_deaths,",
				"          weekly_cases,",
				"          weekly_deaths",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectContinent",
				"CasesDeathsSource filter(not(isNull(location))) ~> FilterNullContinent",
				"SelectContinent filter(continent=='Europe') ~> filterForOnlyEurope",
				"filterForOnlyEurope select(mapColumn(",
				"          date,",
				"          country,",
				"          new_cases,",
				"          new_deaths,",
				"          total_cases,",
				"          total_deaths,",
				"          weekly_cases,",
				"          weekly_deaths",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectForSink",
				"SelectForSink sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          country",
				"     )) ~> CasesAndDeathsSink"
			]
		}
	}
}