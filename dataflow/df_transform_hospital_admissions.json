{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "SourceHospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "AggAddStartAndEndDate"
				},
				{
					"name": "splitDailyAndWeekly"
				},
				{
					"name": "lookupCountry"
				},
				{
					"name": "selectColumn"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "selectColumnDaily"
				},
				{
					"name": "lookupWeekly"
				},
				{
					"name": "selectWeekly"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceHospitalAdmissions",
				"source(output(",
				"          date_key as string,",
				"          date as date,",
				"          year as short,",
				"          month as short,",
				"          day as short,",
				"          day_name as string,",
				"          day_of_year as short,",
				"          week_of_month as short,",
				"          week_of_year as short,",
				"          month_name as string,",
				"          year_month as integer,",
				"          year_week as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"sourceDimDate aggregate(groupBy(ecdc_week_year = toString(year)+\"-W\"+lpad(toString(week_of_year),2,'0')),",
				"     start_date = min(date),",
				"          end_date = max(date)) ~> AggAddStartAndEndDate",
				"selectColumn split(indicator=='Weekly new hospital admissions per 100k' || indicator=='Weekly new ICU admissions per 100k',",
				"     indicator=='Daily hospital occupancy' || indicator=='Daily ICU occupancy',",
				"     disjoint: false) ~> splitDailyAndWeekly@(Weekly, Daily)",
				"SourceHospitalAdmissions, sourceDimCountry lookup(SourceHospitalAdmissions@country == sourceDimCountry@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupCountry",
				"lookupCountry select(mapColumn(",
				"          country = SourceHospitalAdmissions@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          indicator,",
				"          date,",
				"          year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumn",
				"splitDailyAndWeekly@Weekly pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          date,",
				"          year_week,",
				"          source),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeekly",
				"splitDailyAndWeekly@Daily pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          date,",
				"          year_week,",
				"          source),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotDaily",
				"sortDaily select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          reported_date = date,",
				"          source,",
				"          hospital_occupancy_count = {Daily hospital occupancy},",
				"          icu_occupancy_count = {Daily ICU occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumnDaily",
				"pivotWeekly, AggAddStartAndEndDate lookup(year_week == ecdc_week_year,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookupWeekly",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          continent,",
				"          population,",
				"          reported_year_week = year_week,",
				"          reported_start_date = start_date,",
				"          reported_end_date = end_date,",
				"          source,",
				"          new_hospital_occupancy_count = {Weekly new hospital admissions per 100k},",
				"          new_icu_occupancy_count = {Weekly new ICU admissions per 100k}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly",
				"lookupWeekly sort(desc(year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(date, true),",
				"     asc(country, true)) ~> sortDaily",
				"selectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkWeekly",
				"selectColumnDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sinkDaily"
			]
		}
	}
}