{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_raw_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "SourceHospitalAdmissions"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_date",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				},
				{
					"dataset": {
						"referenceName": "ds_lookup_dim_country",
						"type": "DatasetReference"
					},
					"name": "sourceDimCountry"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_weekly",
						"type": "DatasetReference"
					},
					"name": "sinkWeekly"
				},
				{
					"dataset": {
						"referenceName": "ds_processed_hospital_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "sinkDaily"
				}
			],
			"transformations": [
				{
					"name": "splitDailyAndWeekly"
				},
				{
					"name": "selectColumn"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectDailyCol"
				},
				{
					"name": "selectWeekly"
				},
				{
					"name": "filterForEurope"
				},
				{
					"name": "joinCountry"
				},
				{
					"name": "convertTypeReplaceNull"
				}
			],
			"scriptLines": [
				"source(output(",
				"          entity as string,",
				"          iso_code as string,",
				"          date as date,",
				"          indicator as string,",
				"          value as double",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SourceHospitalAdmissions",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"source(output(",
				"          countriesAndTerritories as string,",
				"          location as string,",
				"          continent as string,",
				"          population_year as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimCountry",
				"selectColumn split(indicator=='Weekly new hospital admissions' || indicator=='Weekly new ICU admissions',",
				"     indicator=='Daily hospital occupancy' || indicator=='Daily ICU occupancy',",
				"     disjoint: false) ~> splitDailyAndWeekly@(Weekly, Daily)",
				"joinCountry select(mapColumn(",
				"          country = entity,",
				"          date,",
				"          indicator,",
				"          value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectColumn",
				"splitDailyAndWeekly@Weekly pivot(groupBy(country,",
				"          date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions', 'Weekly new ICU admissions']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotWeekly",
				"splitDailyAndWeekly@Daily pivot(groupBy(country,",
				"          date),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {} = sum(value),",
				"     columnNaming: '$N$V',",
				"     lateral: true) ~> pivotDaily",
				"selectWeekly sort(desc(date, true),",
				"     asc(country, true)) ~> sortWeekly",
				"convertTypeReplaceNull sort(desc(date, true),",
				"     asc(country, true)) ~> sortDaily",
				"pivotDaily select(mapColumn(",
				"          country,",
				"          date,",
				"          daily_hospital_occupancy = {Daily hospital occupancy},",
				"          daily_icu_occupancy = {Daily ICU occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDailyCol",
				"pivotWeekly select(mapColumn(",
				"          country,",
				"          date,",
				"          new_hospital_admissions = {Weekly new hospital admissions},",
				"          new_icu_admissions = {Weekly new ICU admissions}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly",
				"sourceDimCountry filter(continent == 'Europe') ~> filterForEurope",
				"SourceHospitalAdmissions, filterForEurope join(entity == location,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinCountry",
				"selectDailyCol derive(daily_hospital_occupancy = coalesce(toInteger(daily_hospital_occupancy),0),",
				"          daily_icu_occupancy = coalesce(toInteger(daily_icu_occupancy),0)) ~> convertTypeReplaceNull",
				"sortWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          country",
				"     )) ~> sinkWeekly",
				"sortDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          date as date,",
				"          daily_hospital_occupancy as integer,",
				"          daily_icu_occupancy as integer,",
				"          country as string",
				"     ),",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('key',",
				"          0,",
				"          country",
				"     )) ~> sinkDaily"
			]
		}
	}
}